var documenterSearchIndex = {"docs":
[{"location":"components/","page":"Components","title":"Components","text":"Pages = [\"components.md\"]","category":"page"},{"location":"components/#Properties","page":"Components","title":"Properties","text":"","category":"section"},{"location":"components/","page":"Components","title":"Components","text":"Modules = [Hestia]\nPages   = [\"properties.jl\"]\nOrder   = [:type, :function, ]\nPrivate = false","category":"page"},{"location":"components/#Hestia.DynamicAnisotropic-Tuple{Vector{var\"#s12\"} where var\"#s12\"<:Real, Vector{var\"#s13\"} where var\"#s13\"<:Real, Vector{var\"#s14\"} where var\"#s14\"<:Real, Vector{var\"#s15\"} where var\"#s15\"<:Real}","page":"Components","title":"Hestia.DynamicAnisotropic","text":"createDynamicAnisotropic(conductivityx :: Vector{T}, conductivityy :: Vector{T}, conductivity_z :: Vector{T},  density :: Vector{T}, capacity :: Vector{T}) where T <: Real\n\nReturns a DynamicAnisotropic    \n\n\n\n\n\n","category":"method"},{"location":"components/#Hestia.DynamicIsotropic","page":"Components","title":"Hestia.DynamicIsotropic","text":"DynamicIsotropic\n\nTemperature-dependent isotropic properties\n\nA record for static isotropic properties.\n\n### Elements  \n`λᵢ` : thermal conductivity coefficients \n\n`ρᵢ` : volumetric mass density coefficients\n\n`cᵢ` : specific heat capacity coefficients\n\n\n\n\n\n","category":"type"},{"location":"components/#Hestia.StaticAnisotropic","page":"Components","title":"Hestia.StaticAnisotropic","text":"Static anisotropic properties λ = diag(λx, λy, λz) = [λx 0 0; 0 λy 0 ; 0 0 λz]\n\n\n\n\n\n","category":"type"},{"location":"components/#Hestia.getdiffusivity-Tuple{StaticIsotropic}","page":"Components","title":"Hestia.getdiffusivity","text":"getdiffusivity(prop :: StaticIsotropic)\n\nReturns the diffusivity of a StaticIsotropic\n\nα = λ/(ρ ⋅ c)\n\n\n\n\n\n","category":"method"},{"location":"components/#Geometry","page":"Components","title":"Geometry","text":"","category":"section"},{"location":"components/","page":"Components","title":"Components","text":"Modules = [Hestia]\nPages   = [\"geometry.jl\"]\nOrder   = [:type, :function, ]\nPrivate = false","category":"page"},{"location":"components/#Hestia.HeatCuboid","page":"Components","title":"Hestia.HeatCuboid","text":"HeatCuboid <: AbstractCubicObject\n\nModel of a two dimensional plate for heat conduction\n\nElements\n\ndimension : tuple of length, width and heigth of the plate: (length, width, height)\n\nsampling : tuple of spatial discretization: (Δx, Δy, Δz)\n\nheatcells : number of heatcells in total\n\n\n\n\n\n","category":"type"},{"location":"components/#Hestia.HeatPlate","page":"Components","title":"Hestia.HeatPlate","text":"HeatPlate <: AbstractCubicObject\n\nModel of a two dimensional plate for heat conduction\n\nElements\n\ndimension : tuple of length and width of the plate: (length, width)\n\nsampling : tuple of spatial discretization: (Δx, Δy)\n\nheatcells : Number of heatcells per direction: {Nx, Ny}\n\n\n\n\n\n","category":"type"},{"location":"components/#Hestia.HeatPlate-Tuple{Real, Real, Integer, Integer}","page":"Components","title":"Hestia.HeatPlate","text":"HeatPlate(plate_length :: Real, plate_width ::  Real, Nx :: Integer, Ny :: Integer, heatcells :: Array{S,1} where S <: Real)\n\nReturns a HeatPlate model\n\n\n\n\n\n","category":"method"},{"location":"components/#Hestia.HeatRod-Tuple{Real, Integer}","page":"Components","title":"Hestia.HeatRod","text":"HeatRod(rod_length :: Real,  heatcells :: Integer )\n\nReturns a HeatRod model\n\n\n\n\n\n","category":"method"},{"location":"components/#Hestia.getindices-Tuple{HeatPlate}","page":"Components","title":"Hestia.getindices","text":"getindices( heatPlate :: HeatPlate ; cellPosition::Symbol = :complete )\n\nReturns all indices for a certain cellPosition\n\nValid CellPositions\n\n:complete\n\n:center\n\n:west\n\n:east\n\n:south\n\n:north\n\n\n\n\n\n","category":"method"},{"location":"components/#Hestia.getindices-Tuple{HeatRod}","page":"Components","title":"Hestia.getindices","text":"getindices( heatrod :: HeatRod ; cellPosition::Symbol = :complete )\n\nReturns all indices for a certain cellPosition\n\nValid CellPositions\n\n:complete\n\n:center\n\n:west\n\n:east\n\n\n\n\n\n","category":"method"},{"location":"components/#Boundary","page":"Components","title":"Boundary","text":"","category":"section"},{"location":"components/","page":"Components","title":"Components","text":"Modules = [Hestia]\nPages   = [\"boundary.jl\"]\nOrder   = [:type, :function, ]\nPrivate = false","category":"page"},{"location":"components/#Hestia.Boundary-Tuple{Hestia.AbstractGeometricalObject}","page":"Components","title":"Hestia.Boundary","text":"Boundary(geometry :: AbstractGeometricalObject)\n\nInitialize the boundary sides for a geometry. \n\n\n\n\n\n","category":"method"},{"location":"components/#Configuration","page":"Components","title":"Configuration","text":"","category":"section"},{"location":"components/","page":"Components","title":"Components","text":"Modules = [Hestia]\nPages   = [\"characterization.jl\"]\nOrder   = [:type, :function, ]\nPrivate = false","category":"page"},{"location":"components/#Hestia.RadialConfiguration","page":"Components","title":"Hestia.RadialConfiguration","text":"RadialConfiguration <: AbstractStaticConfiguration\n\nStores the values for the calculation of m  exp( -M (x - xₛ)^2ν )\n\nscaling : m ∈ [0, 1]\n\npower : ν ∈ [0, ∞)\n\ncenter : xₛ ∈ R^{3}\n\ncurvature : M ∈ R^{3 x 3} for the planar boundaries\n\n\n\n\n\n","category":"type"},{"location":"components/#Hestia.characterize-Tuple{Real, Real, Real, RadialConfiguration}","page":"Components","title":"Hestia.characterize","text":"characterize(start :: Real, stop :: Real, step :: Real, config :: RadialConfiguration; dim = 1 :: Integer )\n\nx₁: dim = 1\n\nx₂: dim = 2\n\nx₃: dim = 3\n\n\n\n\n\n","category":"method"},{"location":"components/#Hestia.characterize-Union{Tuple{T}, Tuple{Tuple{T, T}, Tuple{T, T}, Tuple{T, T}, RadialConfiguration}} where T<:Real","page":"Components","title":"Hestia.characterize","text":"characterize(start :: Real, stop :: Real, step :: Real, config :: RadialConfiguration; dim = 1 :: Integer )\n\nx₁ ∪ x₂ dim = {1,2}\n\nx₁ ∪ x₃: dim = {1,3}\n\nx₂ ∪ x₃: dim = {2,3}\n\n\n\n\n\n","category":"method"},{"location":"components/#Hestia.initConfiguration-Tuple{}","page":"Components","title":"Hestia.initConfiguration","text":"initConfiguration()\n\nInitializes and returns a basic RadialConfiguration\n\n\n\n\n\n","category":"method"},{"location":"components/#Hestia.setConfiguration-Tuple{Real, Integer, Matrix{T} where T<:Real}","page":"Components","title":"Hestia.setConfiguration","text":"setConfiguration( scale :: Real , power :: Integer; curvature = 1.0 :: Real)\n\nThe center is set to the origin (0,0,0).\n\n\n\n\n\n","category":"method"},{"location":"components/#Hestia.setConfiguration-Tuple{Real, Integer, Real}","page":"Components","title":"Hestia.setConfiguration","text":"setConfiguration( scale :: Real , power :: Integer, curvature :: Real)\n\nThe center is set to the origin (0,0,0).\n\n\n\n\n\n","category":"method"},{"location":"components/#Hestia.setConfiguration-Tuple{Real, Integer, Tuple{Real, Real, Real}, Matrix{T} where T<:Real}","page":"Components","title":"Hestia.setConfiguration","text":"setConfiguration( scale :: Real , power :: Integer, central_point :: Tuple{Real,Real,Real}, curvature :: Array{T,2} where T <: Real)\n\nReturns a RadialConfiguration\n\n\n\n\n\n","category":"method"},{"location":"components/#Hestia.setConfiguration-Tuple{Real, Integer, Tuple{Real, Real, Real}, Real}","page":"Components","title":"Hestia.setConfiguration","text":"setConfiguration( scale :: Real , power :: Integer, central_point :: Tuple{Real,Real,Real}, curvature :: Real)\n\nHere the variable curvature is multiplied with the identity matrix to gain matrix M.\n\nReturns a RadialConfiguration\n\n\n\n\n\n","category":"method"},{"location":"components/#IOSetup","page":"Components","title":"IOSetup","text":"","category":"section"},{"location":"components/","page":"Components","title":"Components","text":"Modules = [Hestia]\nPages   = [\"iosetup.jl\"]\nOrder   = [:type, :function, ]\nPrivate = false","category":"page"},{"location":"components/#Hestia.IOSetup-Tuple{Hestia.AbstractGeometricalObject}","page":"Components","title":"Hestia.IOSetup","text":"IOSetup(geometry :: AbstractGeometricalObject)\n\nInitialize IOSetup as basic element for actuation and sensing.\n\n\n\n\n\n","category":"method"},{"location":"components/#Hestia.measure-Tuple{Matrix{var\"#s37\"} where var\"#s37\"<:Real, Vector{var\"#s36\"} where var\"#s36\"<:Real}","page":"Components","title":"Hestia.measure","text":"measure(temperatures :: Matrix{<:Real}, character :: Vector{<:Real})\n\nReturns the weighted arithmetic mean of the measurement.\n\n\n\n\n\n","category":"method"},{"location":"components/#Hestia.measure-Tuple{Vector{var\"#s37\"} where var\"#s37\"<:Real, Vector{var\"#s36\"} where var\"#s36\"<:Real}","page":"Components","title":"Hestia.measure","text":"measure(temperatures :: Vector{<:Real}, character :: Vector{<:Real})\n\nReturns the weighted arithmetic mean of the measurement.\n\n\n\n\n\n","category":"method"},{"location":"theory/actuators_sensors/#actuators","page":"Actuators and Sensors","title":"Actuators and Sensors","text":"","category":"section"},{"location":"theory/actuators_sensors/","page":"Actuators and Sensors","title":"Actuators and Sensors","text":"Actuators are assumed only on the boundary sides of the geometrical object - not inside the object. It is possible to place more than one actuator on one boundary side. So, boundary sides with actuators are subdivided in partitions of equal size. In each partition we can specify wheter one actuator is assumed or not. It is not possible to specify more than one actuator per partition. If for instance 5 actuators are assumed on boundary :south then 5 partitions are created.","category":"page"},{"location":"theory/actuators_sensors/#Spatial-Characterization","page":"Actuators and Sensors","title":"Spatial Characterization","text":"","category":"section"},{"location":"theory/actuators_sensors/","page":"Actuators and Sensors","title":"Actuators and Sensors","text":"The n-th actuator has inside its partition the radially symmetric spatial characterization","category":"page"},{"location":"theory/actuators_sensors/","page":"Actuators and Sensors","title":"Actuators and Sensors","text":"b_n(x) = m_n exp(-M_n  lVert x-x_crVert^2nu_n)","category":"page"},{"location":"theory/actuators_sensors/","page":"Actuators and Sensors","title":"Actuators and Sensors","text":"with","category":"page"},{"location":"theory/actuators_sensors/","page":"Actuators and Sensors","title":"Actuators and Sensors","text":"scaling m in 01\ncurvature matrix M in mathbbR^3,\npower nu in 123 cdots and\ncentral point x_c of the partition.","category":"page"},{"location":"theory/actuators_sensors/","page":"Actuators and Sensors","title":"Actuators and Sensors","text":"The central point of each partition is calculated internally, all other values have to be fixed. In many situations curvature matrix M can be assumed as a scaled identity matrix, for example M = 54  I_3 times 3.","category":"page"},{"location":"theory/actuators_sensors/#Quick-Overview","page":"Actuators and Sensors","title":"Quick Overview","text":"","category":"section"},{"location":"theory/actuators_sensors/","page":"Actuators and Sensors","title":"Actuators and Sensors","text":"HeatRods have single points as boundary sides: ","category":"page"},{"location":"theory/actuators_sensors/","page":"Actuators and Sensors","title":"Actuators and Sensors","text":"only 1 actuator per side is possible\nno partitions\nspatial characterization b is only a number ","category":"page"},{"location":"theory/actuators_sensors/","page":"Actuators and Sensors","title":"Actuators and Sensors","text":"HeatPlates have four boundary sides as 1-dimensional lines:  ","category":"page"},{"location":"theory/actuators_sensors/","page":"Actuators and Sensors","title":"Actuators and Sensors","text":"more than 1 actuator per side is possible\npartitions are 1-dimensional intervals\nspatial characterization b_n(x) is 1-dimensional function","category":"page"},{"location":"theory/actuators_sensors/","page":"Actuators and Sensors","title":"Actuators and Sensors","text":"HeatCuboidss have six boundary sides as 2-dimensional areas:  ","category":"page"},{"location":"theory/actuators_sensors/","page":"Actuators and Sensors","title":"Actuators and Sensors","text":"more than 1 actuator per side is possible\npartitions are 2-dimensional intervals\nspatial characterization b_n(x) is 2-dimensional function, x=(x_1x_2)","category":"page"},{"location":"theory/actuators_sensors/#Sensors","page":"Actuators and Sensors","title":"Sensors","text":"","category":"section"},{"location":"theory/actuators_sensors/","page":"Actuators and Sensors","title":"Actuators and Sensors","text":"measure","category":"page"},{"location":"theory/actuators_sensors/#Hestia.measure","page":"Actuators and Sensors","title":"Hestia.measure","text":"measure(temperatures :: Vector{<:Real}, character :: Vector{<:Real})\n\nReturns the weighted arithmetic mean of the measurement.\n\n\n\n\n\nmeasure(temperatures :: Matrix{<:Real}, character :: Vector{<:Real})\n\nReturns the weighted arithmetic mean of the measurement.\n\n\n\n\n\n","category":"function"},{"location":"theory/geometry_boundary/#Geometry","page":"Geometry","title":"Geometry","text":"","category":"section"},{"location":"theory/geometry_boundary/","page":"Geometry","title":"Geometry","text":"Hestia is developed for simple geometries in one, two and three dimensions. At the moment these shapes are implemented:","category":"page"},{"location":"theory/geometry_boundary/","page":"Geometry","title":"Geometry","text":"1D rod: HeatRod\n2D rectangle (or plate): HeatPlate\n3D cuboid: HeatCuboid","category":"page"},{"location":"theory/geometry_boundary/","page":"Geometry","title":"Geometry","text":"A HeatRod has","category":"page"},{"location":"theory/geometry_boundary/","page":"Geometry","title":"Geometry","text":"a length (in x-direction) and\na number of discretization cells.","category":"page"},{"location":"theory/geometry_boundary/","page":"Geometry","title":"Geometry","text":"A HeatPlate has","category":"page"},{"location":"theory/geometry_boundary/","page":"Geometry","title":"Geometry","text":"a length (in x-direction), its number of discretization cells (Nx) and\na width (in y-direction), its disretization (Ny).","category":"page"},{"location":"theory/geometry_boundary/","page":"Geometry","title":"Geometry","text":"A HeatCuboid has","category":"page"},{"location":"theory/geometry_boundary/","page":"Geometry","title":"Geometry","text":"a length (in x-direction), its number of discretization cells (Nx),\na width (in y-direction), its disretization (Ny) and\na height (in z-direction), its disretization (Nz).","category":"page"},{"location":"theory/geometry_boundary/#Boundary-sides","page":"Geometry","title":"Boundary sides","text":"","category":"section"},{"location":"theory/geometry_boundary/","page":"Geometry","title":"Geometry","text":"The one-dimensional rod (HeatRod) has two boundary sides:","category":"page"},{"location":"theory/geometry_boundary/","page":"Geometry","title":"Geometry","text":":west and :east.","category":"page"},{"location":"theory/geometry_boundary/","page":"Geometry","title":"Geometry","text":"These boundary sides are single points.","category":"page"},{"location":"theory/geometry_boundary/","page":"Geometry","title":"Geometry","text":"The two-dimensional plate (HeatPlate) has four boundary sides:","category":"page"},{"location":"theory/geometry_boundary/","page":"Geometry","title":"Geometry","text":":west, :east and\n:south, :north.","category":"page"},{"location":"theory/geometry_boundary/","page":"Geometry","title":"Geometry","text":"These boundary sides are one-dimensional lines. ","category":"page"},{"location":"theory/geometry_boundary/","page":"Geometry","title":"Geometry","text":"The three-dimensional cuboid (HeatCuboid) has four boundary sides:","category":"page"},{"location":"theory/geometry_boundary/","page":"Geometry","title":"Geometry","text":":west, :east,\n:south, :north and\n:underside, :topside.","category":"page"},{"location":"theory/geometry_boundary/","page":"Geometry","title":"Geometry","text":"These boundary sides are two-dimensional areas. ","category":"page"},{"location":"theory/material_properties/#Material","page":"Material","title":"Material","text":"","category":"section"},{"location":"theory/material_properties/","page":"Material","title":"Material","text":"The material properties ","category":"page"},{"location":"theory/material_properties/","page":"Material","title":"Material","text":"volumetric mass density rho,\nspecific heat capacity c and\nthermal conductivity lambda","category":"page"},{"location":"theory/material_properties/","page":"Material","title":"Material","text":"can be specified as ","category":"page"},{"location":"theory/material_properties/","page":"Material","title":"Material","text":"temperature-independent (here called static) or\ntemperature-dependent (here called dynamic)","category":"page"},{"location":"theory/material_properties/","page":"Material","title":"Material","text":"In case of temperature-independent material properties, the variables rho, c and lambda are defined as constant real values.","category":"page"},{"location":"theory/material_properties/","page":"Material","title":"Material","text":"In case of temperature-dependent material properties, the variables rho, c and lambda are defined via Vectors. If the specific heat capacity is defined by ","category":"page"},{"location":"theory/material_properties/","page":"Material","title":"Material","text":"c(theta) = 11 + 22theta + 33theta^2","category":"page"},{"location":"theory/material_properties/","page":"Material","title":"Material","text":"with temperature theta, then the corresponding Vector is implemented as c = [11, 22, 33]. If at least one material property is temperature-dependent then the other properties have to be implemented as Vectors.","category":"page"},{"location":"theory/material_properties/#Anisotropic-heat-conduction","page":"Material","title":"Anisotropic heat conduction","text":"","category":"section"},{"location":"theory/material_properties/","page":"Material","title":"Material","text":"Additional to the specification temperature-dependent vs. -independent the thermal conductivity can be assumed as isotropic or anisotropic. ","category":"page"},{"location":"theory/material_properties/","page":"Material","title":"Material","text":"In case of anisotropic heat conduction the thermal conductivity of the geometrical object depends on the spatial direction. Mathematically noted, the thermal conductivity lambda is now a matrix or matrix-valued function, e.g. for cuboids","category":"page"},{"location":"theory/material_properties/","page":"Material","title":"Material","text":"lambda = \nbeginpmatrix\nlambda_x  0  0 \n0  lambda_y  0 \n0  0  lambda_z\nendpmatrix","category":"page"},{"location":"theory/material_properties/","page":"Material","title":"Material","text":"or","category":"page"},{"location":"theory/material_properties/","page":"Material","title":"Material","text":"lambda(theta) =\nbeginpmatrix\nlambda_x(theta)  0  0 \n0  lambda_y(theta)  0 \n0  0  lambda_z(theta)\nendpmatrix","category":"page"},{"location":"theory/material_properties/","page":"Material","title":"Material","text":"So for anisotropic heat conduction two (for 2D = plate) or three components (for 3D = cuboid) of thermal conductivity lambda have to be defined.","category":"page"},{"location":"theory/material_properties/","page":"Material","title":"Material","text":"In conclusion, the material can be defined as","category":"page"},{"location":"theory/material_properties/","page":"Material","title":"Material","text":"temperature-independent and isotropic: StaticIsoProperty\ntemperature-dependent and isotropic: DynamicIsoProperty\ntemperature-independent and anisotropic: StaticAnisoProperty\ntemperature-dependent and anisotropic: DynamicAnisoProperty","category":"page"},{"location":"getting_started/#Getting-Started-with-Hestia","page":"Getting Started","title":"Getting Started with Hestia","text":"","category":"section"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"In this tutorial you will learn how to simulate heat conduction phenomenas with Hestia.jl. Firstly, we take build a simulation for a 1-dimensional linear heat equation. And secondly, we show how to simulate 2-dimension quasi-linear heat conduction.","category":"page"},{"location":"getting_started/#Example:-1-dimensional-linear-heat-conduction","page":"Getting Started","title":"Example: 1-dimensional linear heat conduction","text":"","category":"section"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"In our first example, we show how to simulate the heat equation","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"fracddt theta(tx) = fraclambdacrho fracd^2dx^2 theta(tx) quad (tx) in (0T) times (0L)","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"in a one-dimensional rod with length L=02 for T=300 seconds.  ","category":"page"},{"location":"getting_started/#Material","page":"Getting Started","title":"Material","text":"","category":"section"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"In this tutorial, we assume constant material properties","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"thermal conductivity: lambda=50 fracWm  K,  \nspecific heat capacity: c=400 fracJkg  K and\nmass density: rho=8000 frackgm^3. ","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"We consider isotropic thermal conductivity because we model heat conduction only in one direction. ","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"using Hestia\nλ = 50    \nρ = 8000\nc = 400 \nprop = StaticIsotropic(λ, ρ, c)","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"info: Info\nFour types are offered to model the material properties: StaticIsotropic, DynamicIsotropic, StaticAnistropic, DynamicAnisotropic. More information about material properties can be found on page Material and Physical Properties","category":"page"},{"location":"getting_started/#Geometry","page":"Getting Started","title":"Geometry","text":"","category":"section"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"We consider a one-dimensional rod of length L=02 which is discretized by 40 points. The one-dimensional rod is implemented in Hestia as HeatRod and it contains the length and number of grid points.","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"L = 0.2    \nNx = 40  \nrod = HeatRod(L, Nx)","category":"page"},{"location":"getting_started/#Boundary-sides","page":"Getting Started","title":"Boundary sides","text":"","category":"section"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"The one-dimensional rod has two boundary sides: on the left side and on the rigth side. The left side is denoted as :west and the right side as :east. On the boundary sides only Neumann-type boundary conditions can be used. Here, we simulate our heat equation with thermal convection on boundary :east and thermal isolation on boundary side :west. The boundary condition with thermal convection is described mathematically as","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"lambda  fracddx theta(tx) = -h theta(tx) - theta_amb","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"with h as heat transfer paramter and theta_amb as ambient temperature. We assume h=10 and theta_amb=300.","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"h = 10;\nθamb = 300;\nemission = Emission(h, 0, θamb)   # Only convection\nboundary = Boundary(rod)\nsetEmission!(boundary, emission, :east); ","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"The thermal isolation on boundary side :west does not have to be specified in code explicitely. Internally, boundary side :west is initialized automatically as a zero-Neumann boundary condition.","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"info: Info\nThree geometric forms can be used: HeatRod for 1D, HeatPlate for 2D and HeatCuboid for 3D.  More information about the geometry and boundary sides can be found on page Geometry and Boundaries","category":"page"},{"location":"getting_started/#Simulation","page":"Getting Started","title":"Simulation","text":"","category":"section"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"In the last step, we define our heat conduction problem as an ordinary differential equation (ODE) and solve it with OrdinaryDiffEq.jl. More information about how to solve differential equations can be found in the DifferentialEquations.jl docs. So we define the ODE function and call the Hestia function diffusion!. ","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"function heat_conduction!(dθ, θ, param, t)\n    diffusion!(dθ, θ, rod, prop, boundary)\nend","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"We assume theta(0x)=300 + 100 sin(pi xL) Kelvin as initial temperature and compute the simulation until T=300 seconds. Here, we use the KenCarp5 numerical integrator because it is able to solve stiff differential equations. Stiff equations are explained on Wikipedia. ","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"using OrdinaryDiffEq\nNgrid = 1:1:Nx\nθinit = 300 .+ 100sinpi.((Ngrid.-0.5)/Nx)\ntspan = (0.0, 300.0)\nalg = KenCarp5()\nprob = ODEProblem(heat_conduction!,θinit,tspan)\nsol = solve(prob,alg, saveat=1.0)","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"Finally, we plot our results with Plots.jl and compare the initial temperatures versus the final temperatures.  ","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"using Plots\nxgrid = L*(Ngrid.-0.5)/Nx\nplot(xgrid, sol[:,1], title=\"Simulation of 1D heat conduction\",xlabel=\"Length L in [m]\", ylabel=\"Temperature in [K]\", label=\"Initial\")\nplot!(xgrid, sol[:,end], label=\"Final\")","category":"page"},{"location":"getting_started/#What-is-next?","page":"Getting Started","title":"What is next?","text":"","category":"section"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"Hestia is designed to simulate boundary controlled heat conduction phenomena in multiple dimensions (1D, 2D, 3D). On page One-dimensional rod you will learn how to simulate 1D heat conduction including a heat supply on the left boundary side. On page Two-dimensional plate we model quasi-linear heat conduction in a rectangle, in which the material properties depend on the temperature. ","category":"page"},{"location":"examples/plate_2d/#Two-dimensional-plate","page":"Two-dimensional plate","title":"Two-dimensional plate","text":"","category":"section"},{"location":"examples/plate_2d/","page":"Two-dimensional plate","title":"Two-dimensional plate","text":"In this example we assume isotropic, temperature-dependend heat conduction in a 2-dimensional plate ((xy) in 0L times 0W) with length L=02 and width W=01. The plate is heated-up with 3 actuators on boundary ","category":"page"},{"location":"examples/plate_2d/","page":"Two-dimensional plate","title":"Two-dimensional plate","text":":south ((xy) in 0L times 0) ","category":"page"},{"location":"examples/plate_2d/","page":"Two-dimensional plate","title":"Two-dimensional plate","text":"and emits thermal energy on boundaries ","category":"page"},{"location":"examples/plate_2d/","page":"Two-dimensional plate","title":"Two-dimensional plate","text":":west - (xy) in 0 times 0W, \n:east - (xy) in L times 0W and \n:north - (xy) in 0L times W.  ","category":"page"},{"location":"examples/plate_2d/","page":"Two-dimensional plate","title":"Two-dimensional plate","text":"The quasi-linear heat equation is noted as","category":"page"},{"location":"examples/plate_2d/","page":"Two-dimensional plate","title":"Two-dimensional plate","text":"fracpartial theta(txy)partial t = frac1c(theta)rho(theta) leftfracpartialpartial x left( lambda(theta) fracpartial theta(tx)partial xright) + fracpartialpartial y left( lambda(theta) fracpartial theta(txy)partial yright) right","category":"page"},{"location":"examples/plate_2d/","page":"Two-dimensional plate","title":"Two-dimensional plate","text":"with boundary conditions -lambda fracpartial theta(txy)partial y = b_1(xy)  u_1(t) + b_2(xy)  u_2(t) + b_3(xy)  u_3(t)","category":"page"},{"location":"examples/plate_2d/","page":"Two-dimensional plate","title":"Two-dimensional plate","text":"as actuation on boundary :south at y=0 and emissions","category":"page"},{"location":"examples/plate_2d/","page":"Two-dimensional plate","title":"Two-dimensional plate","text":"-lambda fracpartial theta(txy)partial x = -h (theta(txy) - theta_amb) - epsilon sigma (theta(txy)^4 - theta_amb^4)","category":"page"},{"location":"examples/plate_2d/","page":"Two-dimensional plate","title":"Two-dimensional plate","text":"on boundary :west at x=0","category":"page"},{"location":"examples/plate_2d/","page":"Two-dimensional plate","title":"Two-dimensional plate","text":"lambda fracpartial theta(txy)partial x = -h (theta(txy) - theta_amb) - epsilon sigma (theta(txy)^4 - theta_amb^4)","category":"page"},{"location":"examples/plate_2d/","page":"Two-dimensional plate","title":"Two-dimensional plate","text":"on boundary :east at x=L and ","category":"page"},{"location":"examples/plate_2d/","page":"Two-dimensional plate","title":"Two-dimensional plate","text":"lambda fracpartial theta(txy)partial y = -h (theta(txy) - theta_amb) - epsilon sigma (theta(txy)^4 - theta_amb^4)","category":"page"},{"location":"examples/plate_2d/","page":"Two-dimensional plate","title":"Two-dimensional plate","text":"on boundary :north at y=W. The heat transfer coefficient h, emissivity epsilon and ambient temperature theta_amb are assumed to be equal for each boundary side. We assume an initial and ambient temperature of 300 Kelvin. ","category":"page"},{"location":"examples/plate_2d/","page":"Two-dimensional plate","title":"Two-dimensional plate","text":"All used values are listed in the table below.","category":"page"},{"location":"examples/plate_2d/","page":"Two-dimensional plate","title":"Two-dimensional plate","text":"Name Variable Value / Formula\nLength L 0.2\nWidth W 0.1\nDiscretization N_x 40\n N_y 20\nDensity rho 8000\nThermal conductivity lambda 20 + 01 theta\nSpecific heat capacity c 220 + 06 theta\nHeat transfer coefficient h 5\nEmissivity epsilon 0.3\nAmbient temperature theta_amb 300","category":"page"},{"location":"examples/plate_2d/#.-Material-Properties-and-Geometry","page":"Two-dimensional plate","title":"1. Material Properties and Geometry","text":"","category":"section"},{"location":"examples/plate_2d/","page":"Two-dimensional plate","title":"Two-dimensional plate","text":"In the first step we define the material properties and the geometry. As stated in the beginning we assume isotropic, temperature-dependent material properties and thus we create a DynamicIsoProperty with createDynamicIsoProperty(λ, ρ, c). We create the geometry: here the two-dimensional plate HeatPlate.","category":"page"},{"location":"examples/plate_2d/","page":"Two-dimensional plate","title":"Two-dimensional plate","text":"λ = [20.0, 0.1]  # Thermal conductivity: temperature-dependend\nρ = [8000.0]     # Mass density: constant\nc = [220.0, 0.6] # Specific heat capacity: temperature-dependend\nproperty = createDynamicIsoProperty(λ, ρ, c)\n\nL = 0.2    # Length\nW = 0.1    # Width\nNx = 40    # Number of elements: x direction\nNy = 40    # Number of elements: y direction\nplate    = HeatPlate(L, W, Nx, Ny, property)","category":"page"},{"location":"examples/plate_2d/#.-Emission","page":"Two-dimensional plate","title":"2. Emission","text":"","category":"section"},{"location":"examples/plate_2d/","page":"Two-dimensional plate","title":"Two-dimensional plate","text":"Next, we define the emitted heat flux on the boundary sides :west, :east and :north. We assume the same linear heat transfer (convection) and nonlinear heat radiation for all boundaries as noted in the table above. ","category":"page"},{"location":"examples/plate_2d/","page":"Two-dimensional plate","title":"Two-dimensional plate","text":"h = 5.0       # Heat transfer coefficient\nϵ = 0.3       # Emissivity\nθamb = 300.0; # Ambient temperature\nemission  = createEmission(h, ϵ, θamb)   # Only convection","category":"page"},{"location":"examples/plate_2d/","page":"Two-dimensional plate","title":"Two-dimensional plate","text":"The emission has to be assigned for all boundary sides. We initialize the boundary with initBoundary() to yield a container which stores all emissions and set the emissions.","category":"page"},{"location":"examples/plate_2d/","page":"Two-dimensional plate","title":"Two-dimensional plate","text":"boundary_plate  = initBoundary(plate)\nboundary_east = :east \nboundary_west = :west \nboundary_north = :north \nsetEmission!(boundary_rod, emission, boundary_east)\nsetEmission!(boundary_rod, emission, boundary_west)\nsetEmission!(boundary_rod, emission, boundary_north)","category":"page"},{"location":"examples/plate_2d/#.-Actuation","page":"Two-dimensional plate","title":"3. Actuation","text":"","category":"section"},{"location":"examples/plate_2d/","page":"Two-dimensional plate","title":"Two-dimensional plate","text":"Firstly, we initialize IOSetup as a container for actuator and sensor setups. In this example, we assume three input signals on boundary side :south. ","category":"page"},{"location":"examples/plate_2d/","page":"Two-dimensional plate","title":"Two-dimensional plate","text":"plate_actuation = initIOSetup(plate)\npos_actuators = :south  # Position of actuators","category":"page"},{"location":"examples/plate_2d/","page":"Two-dimensional plate","title":"Two-dimensional plate","text":"The spatial characterization is defined by","category":"page"},{"location":"examples/plate_2d/","page":"Two-dimensional plate","title":"Two-dimensional plate","text":"b(x) = m  exp(-M  lVert x - x_c rVert^2 nu)","category":"page"},{"location":"examples/plate_2d/","page":"Two-dimensional plate","title":"Two-dimensional plate","text":"with scaling m in 01, curvature matrix M in mathbbR^3 times 3, power nu in 12cdots and central point x_c. Curvature matrix is a diagonal matrix and usually defined as a scaled identity. Central point x_c is computed internally. The first both actuators (from left to right) have the same characterization (m_1 M_1 nu_1) and the third actuator has characterization (m_2 M_2 nu_2) as listed below","category":"page"},{"location":"examples/plate_2d/","page":"Two-dimensional plate","title":"Two-dimensional plate","text":"Name Variable Value / Formula\nActuator b1, b2 (m_1 M_1 nu_1) (10  4I_3times3 3)\nActuator b3 (m_2 M_2 nu_2) (09 20I_3times3 2)","category":"page"},{"location":"examples/plate_2d/","page":"Two-dimensional plate","title":"Two-dimensional plate","text":"# Actuator b1 and b2\nm1 = 1.0;  # Scaling \nM1 = 4.0;  # Curvature 4*I \nν1 = 3;    # Power\n\n# Actuator b3\nm2 = 0.9;   # Scaling \nM2 = 20.0;  # Curvature 20*I\nν2 = 2;     # Power","category":"page"},{"location":"examples/plate_2d/","page":"Two-dimensional plate","title":"Two-dimensional plate","text":"We define two characterizations with setConfiguration(m, ν, M) and define the partition of actuators","category":"page"},{"location":"examples/plate_2d/","page":"Two-dimensional plate","title":"Two-dimensional plate","text":"actuator: b1\nactuator: b1 \nactuator: b2","category":"page"},{"location":"examples/plate_2d/","page":"Two-dimensional plate","title":"Two-dimensional plate","text":"Finally, the actuator setup on the left boundary is created with setIOSetup!(). ","category":"page"},{"location":"examples/plate_2d/","page":"Two-dimensional plate","title":"Two-dimensional plate","text":"config1  = setConfiguration(m1, ν1, M1) # Set actuators characterization b1, b2\nconfig2  = setConfiguration(m2, ν2, M2) # Set actuators characterization b3\n\npartition    = [1,2,3]\nconfig_table = [config1, config1, config2]\n\nsetIOSetup!(plate_actuation, plate, partition, config_table,  pos_actuators)","category":"page"},{"location":"theory/geometry_material/#Geometry","page":"Geometry","title":"Geometry","text":"","category":"section"},{"location":"theory/geometry_material/","page":"Geometry","title":"Geometry","text":"Hestia is developed for simple geometries in one, two and three dimensions. At the moment these shapes are implemented:","category":"page"},{"location":"theory/geometry_material/","page":"Geometry","title":"Geometry","text":"1D rod: HeatRod\n2D rectangle (or plate): HeatPlate\n3D cuboid: HeatCuboid","category":"page"},{"location":"theory/geometry_material/","page":"Geometry","title":"Geometry","text":"A HeatRod has","category":"page"},{"location":"theory/geometry_material/","page":"Geometry","title":"Geometry","text":"a length (in x-direction) and\na number of discretization cells.","category":"page"},{"location":"theory/geometry_material/","page":"Geometry","title":"Geometry","text":"A HeatPlate has","category":"page"},{"location":"theory/geometry_material/","page":"Geometry","title":"Geometry","text":"a length (in x-direction), its number of discretization cells (Nx) and\na width (in y-direction), its disretization (Ny).","category":"page"},{"location":"theory/geometry_material/","page":"Geometry","title":"Geometry","text":"A HeatCuboid has","category":"page"},{"location":"theory/geometry_material/","page":"Geometry","title":"Geometry","text":"a length (in x-direction), its number of discretization cells (Nx),\na width (in y-direction), its disretization (Ny) and\na height (in z-direction), its disretization (Nz).","category":"page"},{"location":"theory/geometry_material/#Boundary-sides","page":"Geometry","title":"Boundary sides","text":"","category":"section"},{"location":"theory/geometry_material/","page":"Geometry","title":"Geometry","text":"The one-dimensional rod (HeatRod) has two boundary sides:","category":"page"},{"location":"theory/geometry_material/","page":"Geometry","title":"Geometry","text":":west and :east.","category":"page"},{"location":"theory/geometry_material/","page":"Geometry","title":"Geometry","text":"These boundary sides are single points.","category":"page"},{"location":"theory/geometry_material/","page":"Geometry","title":"Geometry","text":"The two-dimensional plate (HeatPlate) has four boundary sides:","category":"page"},{"location":"theory/geometry_material/","page":"Geometry","title":"Geometry","text":":west, :east and\n:south, :north.","category":"page"},{"location":"theory/geometry_material/","page":"Geometry","title":"Geometry","text":"These boundary sides are one-dimensional lines. ","category":"page"},{"location":"theory/geometry_material/","page":"Geometry","title":"Geometry","text":"The three-dimensional cuboid (HeatCuboid) has four boundary sides:","category":"page"},{"location":"theory/geometry_material/","page":"Geometry","title":"Geometry","text":":west, :east,\n:south, :north and\n:underside, :topside.","category":"page"},{"location":"theory/geometry_material/","page":"Geometry","title":"Geometry","text":"These boundary sides are two-dimensional areas. ","category":"page"},{"location":"theory/geometry_material/#Material","page":"Geometry","title":"Material","text":"","category":"section"},{"location":"theory/geometry_material/","page":"Geometry","title":"Geometry","text":"The material properties ","category":"page"},{"location":"theory/geometry_material/","page":"Geometry","title":"Geometry","text":"volumetric mass density rho,\nspecific heat capacity c and\nthermal conductivity lambda","category":"page"},{"location":"theory/geometry_material/","page":"Geometry","title":"Geometry","text":"can be specified as ","category":"page"},{"location":"theory/geometry_material/","page":"Geometry","title":"Geometry","text":"temperature-independent (here called static) or\ntemperature-dependent (here called dynamic)","category":"page"},{"location":"theory/geometry_material/","page":"Geometry","title":"Geometry","text":"In case of temperature-independent material properties, the variables rho, c and lambda are defined as constant real values.","category":"page"},{"location":"theory/geometry_material/","page":"Geometry","title":"Geometry","text":"In case of temperature-dependent material properties, the variables rho, c and lambda are defined via Vectors. If the specific heat capacity is defined by ","category":"page"},{"location":"theory/geometry_material/","page":"Geometry","title":"Geometry","text":"c(theta) = 11 + 22theta + 33theta^2","category":"page"},{"location":"theory/geometry_material/","page":"Geometry","title":"Geometry","text":"with temperature theta, then the corresponding Vector is implemented as c = [11, 22, 33]. If at least one material property is temperature-dependent then the other properties have to be implemented as Vectors.","category":"page"},{"location":"theory/geometry_material/#Anisotropic-heat-conduction","page":"Geometry","title":"Anisotropic heat conduction","text":"","category":"section"},{"location":"theory/geometry_material/","page":"Geometry","title":"Geometry","text":"Additional to the specification temperature-dependent vs. -independent the thermal conductivity can be assumed as isotropic or anisotropic. ","category":"page"},{"location":"theory/geometry_material/","page":"Geometry","title":"Geometry","text":"In case of anisotropic heat conduction the thermal conductivity of the geometrical object depends on the spatial direction. Mathematically noted, the thermal conductivity lambda is now a matrix or matrix-valued function, e.g. for cuboids","category":"page"},{"location":"theory/geometry_material/","page":"Geometry","title":"Geometry","text":"lambda = \nbeginpmatrix\nlambda_x  0  0 \n0  lambda_y  0 \n0  0  lambda_z\nendpmatrix","category":"page"},{"location":"theory/geometry_material/","page":"Geometry","title":"Geometry","text":"or","category":"page"},{"location":"theory/geometry_material/","page":"Geometry","title":"Geometry","text":"lambda(theta) =\nbeginpmatrix\nlambda_x(theta)  0  0 \n0  lambda_y(theta)  0 \n0  0  lambda_z(theta)\nendpmatrix","category":"page"},{"location":"theory/geometry_material/","page":"Geometry","title":"Geometry","text":"So for anisotropic heat conduction two (for 2D = plate) or three components (for 3D = cuboid) of thermal conductivity lambda have to be defined.","category":"page"},{"location":"theory/geometry_material/","page":"Geometry","title":"Geometry","text":"In conclusion, the material can be defined as","category":"page"},{"location":"theory/geometry_material/","page":"Geometry","title":"Geometry","text":"temperature-independent and isotropic: StaticIsoProperty\ntemperature-dependent and isotropic: DynamicIsoProperty\ntemperature-independent and anisotropic: StaticAnisoProperty\ntemperature-dependent and anisotropic: DynamicAnisoProperty","category":"page"},{"location":"examples/rod_1d/#One-dimensional-rod","page":"One-dimensional rod","title":"One-dimensional rod","text":"","category":"section"},{"location":"examples/rod_1d/","page":"One-dimensional rod","title":"One-dimensional rod","text":"In this example we assume isotropic, temperature-independent heat conduction in a 1-dimensional rod. The rod is heated-up on the left side (x=0) and emits thermal energy on the right side (x=L) via convection and radiation. The linear heat equation  ","category":"page"},{"location":"examples/rod_1d/","page":"One-dimensional rod","title":"One-dimensional rod","text":"fracpartial theta(tx)partial t = fraclambdacrho fracpartial^2 theta(tx)partial x^2","category":"page"},{"location":"examples/rod_1d/","page":"One-dimensional rod","title":"One-dimensional rod","text":"describes the heat conduction inside the 1D rod. On the left boundary side :west or x=0 we assume an heating element that supplies thermal energy. This is described by the boundary condition","category":"page"},{"location":"examples/rod_1d/","page":"One-dimensional rod","title":"One-dimensional rod","text":"-lambda fracpartial theta(tx)partial x = b  u(t)","category":"page"},{"location":"examples/rod_1d/","page":"One-dimensional rod","title":"One-dimensional rod","text":"in which parameter b scales the input signal u. On the right boundary side :east or x=L we assume that the rod looses thermal energy via heat transfer and heat radiation to its surrounding. These emissions are noted as","category":"page"},{"location":"examples/rod_1d/","page":"One-dimensional rod","title":"One-dimensional rod","text":"lambda fracpartial theta(tx)partial x = -h (theta(tx) - theta_amb) - k (theta(tx)^4 - theta_amb^4)","category":"page"},{"location":"examples/rod_1d/","page":"One-dimensional rod","title":"One-dimensional rod","text":"with heat transfer coefficient h and heat radiation coefficient k. The heat radiation coefficient consist of emissivity ϵ and Stefan-Boltzmann constant sigma approx 567 cdot 10^-8 fracWm^2 K^4 as k=epsilon  sigma. In the source code we do not define k but emissivity ϵ. We assume an initial and ambient temperature of 300 Kelvin. ","category":"page"},{"location":"examples/rod_1d/","page":"One-dimensional rod","title":"One-dimensional rod","text":"All used values are listed in the table below.","category":"page"},{"location":"examples/rod_1d/","page":"One-dimensional rod","title":"One-dimensional rod","text":"Name Variable Value / Formula\nLength L 0.2\nDiscretization N_x 40\nDensity rho 8000\nThermal conductivity lambda 50\nSpecific heat capacity c 400\nHeat transfer coefficient h 5\nEmissivity epsilon 0.2\nAmbient temperature theta_amb 300\nSpatial characterization b 1","category":"page"},{"location":"examples/rod_1d/#.-Material-Properties-and-Geometry","page":"One-dimensional rod","title":"1. Material Properties and Geometry","text":"","category":"section"},{"location":"examples/rod_1d/","page":"One-dimensional rod","title":"One-dimensional rod","text":"In the first step we define the material properties and the geometry. As stated in the beginning we assume isotropic, temperature-independent material properties and thus we create a StaticIsotropic. Next, we create the geometry: here the one-dimensional rod HeatRod.","category":"page"},{"location":"examples/rod_1d/","page":"One-dimensional rod","title":"One-dimensional rod","text":"using Hestia\nλ = 50    # Thermal conductivity\nρ = 8000  # Mass density\nc = 400   # Specific heat capacity\nproperty = StaticIsotropic(λ, ρ, c)","category":"page"},{"location":"examples/rod_1d/","page":"One-dimensional rod","title":"One-dimensional rod","text":"L = 0.2     # Length\nNx = 40     # Number of elements: x direction\nheatrod  = HeatRod(L, Nx)","category":"page"},{"location":"examples/rod_1d/#.-Emission","page":"One-dimensional rod","title":"2. Emission","text":"","category":"section"},{"location":"examples/rod_1d/","page":"One-dimensional rod","title":"One-dimensional rod","text":"Now, we define the emitted heat flux on the right boundary side (x=L). On the right boundary side we assume linear heat transfer (convection) and nonlinear heat radiation with emissivity epsilon=02. ","category":"page"},{"location":"examples/rod_1d/","page":"One-dimensional rod","title":"One-dimensional rod","text":"h = 5;   # Heat transfer coefficient\nϵ = 0.2; # Emissivity\nθamb = 300; # Ambient temperature\nemission = Emission(h, ϵ, θamb) ","category":"page"},{"location":"examples/rod_1d/","page":"One-dimensional rod","title":"One-dimensional rod","text":"Next, this emission has to be assigned for the right boundary side, which is specified as :east. To do so, we initialize the boundary with Boundary() to yield a container which stores all emissions for each boundary.","category":"page"},{"location":"examples/rod_1d/","page":"One-dimensional rod","title":"One-dimensional rod","text":"boundary  = Boundary(heatrod)\nsetEmission!(boundary, emission, :east)","category":"page"},{"location":"examples/rod_1d/#.-Actuation","page":"One-dimensional rod","title":"3. Actuation","text":"","category":"section"},{"location":"examples/rod_1d/","page":"One-dimensional rod","title":"One-dimensional rod","text":"Before we define the actuation we initialize the IOSetup which is a container for actuator and sensor setups.","category":"page"},{"location":"examples/rod_1d/","page":"One-dimensional rod","title":"One-dimensional rod","text":"rod_actuation = IOSetup(heatrod)","category":"page"},{"location":"examples/rod_1d/","page":"One-dimensional rod","title":"One-dimensional rod","text":"In this example, we assume one input signal on the left boundary side (:west). In this example, the spatial characterization is only a single point described by the scaling value. Finally, the actuator setup on the left boundary is created with setIOSetup!(). ","category":"page"},{"location":"examples/rod_1d/","page":"One-dimensional rod","title":"One-dimensional rod","text":"scale         = 1.0;  # b=1\ninput_id      = 1     # Actuator index\npos_actuators = :west # Position of actuators\nsetIOSetup!(rod_actuation, heatrod, input_id, scale,  pos_actuators)","category":"page"},{"location":"examples/rod_1d/#.-Simulation","page":"One-dimensional rod","title":"4. Simulation","text":"","category":"section"},{"location":"examples/rod_1d/","page":"One-dimensional rod","title":"One-dimensional rod","text":"The simulation is built as explained in the DifferentialEquations.jl documentation. We define the differential equation interface heat_conduction!(dθ, θ, param, t) with temperature θ and use method diffusion! to simulate the diffusion. We assume a constant input u(t) = 4 cdot 10^5. Only vector-valued input signals are supported and so it is multiplied with ones(1).","category":"page"},{"location":"examples/rod_1d/","page":"One-dimensional rod","title":"One-dimensional rod","text":"function heat_conduction!(dθ, θ, param, t)\n    u_in = 4e5 * ones(1)    # heat input as vector\n    diffusion!(dθ, θ, heatrod, property, boundary, rod_actuation, u_in)\nend","category":"page"},{"location":"examples/rod_1d/","page":"One-dimensional rod","title":"One-dimensional rod","text":"As noted in the beginning we assume an initial temperature of 300 Kelvin for the whole rod, and we simulate the diffusion for 600 seconds.","category":"page"},{"location":"examples/rod_1d/","page":"One-dimensional rod","title":"One-dimensional rod","text":"θinit = 300*ones(Nx)\ntspan = (0.0, 600.0)","category":"page"},{"location":"examples/rod_1d/#Forward-Euler-method","page":"One-dimensional rod","title":"Forward Euler method","text":"","category":"section"},{"location":"examples/rod_1d/","page":"One-dimensional rod","title":"One-dimensional rod","text":"If we use the forward Euler method we have to fix the sampling time Δt such that the numerical integration is stable check the numerical stability. From von Neumann stability analysis we know that the condition","category":"page"},{"location":"examples/rod_1d/","page":"One-dimensional rod","title":"One-dimensional rod","text":"Delta t  fracDelta x^22 left(fraclambdacrhoright)^-1","category":"page"},{"location":"examples/rod_1d/","page":"One-dimensional rod","title":"One-dimensional rod","text":"has to hold to guarantee numerical stability. ","category":"page"},{"location":"examples/rod_1d/","page":"One-dimensional rod","title":"One-dimensional rod","text":"Δx = heatrod.sampling[1]; # Spatial discretization\nα = λ/(ρ *c);             # Diffusivity constant\ndt_max = Δx^2/(2*α);      # Highest possible sampling time","category":"page"},{"location":"examples/rod_1d/","page":"One-dimensional rod","title":"One-dimensional rod","text":"Here, the sampling time has to be greater than 08 seconds and thus we choose the sampling time Δt = 0.5. In the final step, we define numerical integration method (here: Euler()), the ODEProblem and solve the differential equation. Here, we save the integration for every second saveat=1.0.","category":"page"},{"location":"examples/rod_1d/","page":"One-dimensional rod","title":"One-dimensional rod","text":"import OrdinaryDiffEq\nalg = OrdinaryDiffEq.Euler();\nprob = OrdinaryDiffEq.ODEProblem(heat_conduction!,θinit,tspan)\nsol = OrdinaryDiffEq.solve(prob,alg, dt=Δt, saveat=1.0)","category":"page"},{"location":"examples/rod_1d/#Adaptive-numerical-integration","page":"One-dimensional rod","title":"Adaptive numerical integration","text":"","category":"section"},{"location":"examples/rod_1d/","page":"One-dimensional rod","title":"One-dimensional rod","text":"It is also possible to use adaptive integration methods like KenCarp5(). Then, we do not set a fixed sampling time and we do not have to check the numerical stability.","category":"page"},{"location":"examples/rod_1d/","page":"One-dimensional rod","title":"One-dimensional rod","text":"alg_2 = OrdinaryDiffEq.KenCarp5()\nsol_2 = OrdinaryDiffEq.solve(prob,alg_2, saveat=1.0)","category":"page"},{"location":"examples/rod_1d/#Additional:-Proportional-control","page":"One-dimensional rod","title":"Additional: Proportional control","text":"","category":"section"},{"location":"examples/rod_1d/","page":"One-dimensional rod","title":"One-dimensional rod","text":"In this section we want to implement a proportional controller for the one-dimensional heat equation. In general proportional controllers are defined by","category":"page"},{"location":"examples/rod_1d/","page":"One-dimensional rod","title":"One-dimensional rod","text":"u(t) = K_p  (r(t) - y(t))","category":"page"},{"location":"examples/rod_1d/","page":"One-dimensional rod","title":"One-dimensional rod","text":"with proportional gain K_p, reference r(t) and system output y(t). Here, we specify the right boundary as the system output y(t) = theta(tL)  (θ[end]) and we assume a constant reference value r=400 Kelvin. The proportional gain is found manually as K_p = 600. In this example we assume that our actuator is only able to heat - not to cool. This means, the control signal has to be positive or zero and thus we change the control law to","category":"page"},{"location":"examples/rod_1d/","page":"One-dimensional rod","title":"One-dimensional rod","text":"u(t) = K_p  max(r(t) - y(t) 0)","category":"page"},{"location":"examples/rod_1d/","page":"One-dimensional rod","title":"One-dimensional rod","text":"Kp = 600    # Proportional gain\nΘref = 400  # Reference temperature of right boundary\ncontroller(ref, yout) = Kp*max((ref-yout),0) # Proportional controller","category":"page"},{"location":"examples/rod_1d/","page":"One-dimensional rod","title":"One-dimensional rod","text":"In the differential equations interface we use the controller() method to calculate the input signal.","category":"page"},{"location":"examples/rod_1d/","page":"One-dimensional rod","title":"One-dimensional rod","text":"function heat_conduction_controlled!(dθ, θ, param, t)\n    u_in = controller(Θref, θ[end]) * ones(1)    # heat input\n    diffusion!(dθ, θ, heatrod, property, boundary_rod, rod_actuation, u_in)\nend","category":"page"},{"location":"examples/rod_1d/","page":"One-dimensional rod","title":"One-dimensional rod","text":"Finally, we use a longer time span up to 3500 seconds because the controller is not able to reach the reference in 600 seconds as above.  ","category":"page"},{"location":"examples/rod_1d/","page":"One-dimensional rod","title":"One-dimensional rod","text":"tspan_cntr = (0.0, 3500.0)\nprob_cntr = OrdinaryDiffEq.ODEProblem(heat_conduction_controlled!,θinit,tspan_cntr)\nsol_cntr = OrdinaryDiffEq.solve(prob_cntr,alg, dt=Δt, saveat=1.0)","category":"page"},{"location":"examples/rod_1d/#Full-source-code-listing","page":"One-dimensional rod","title":"Full source code listing","text":"","category":"section"},{"location":"examples/rod_1d/","page":"One-dimensional rod","title":"One-dimensional rod","text":"using Hestia \n\nλ = 50    # Thermal conductivity: constant\nρ = 8000  # Mass density: constant\nc = 400   # Specific heat capacity: constant\nproperty = StaticIsotropic(λ, ρ, c)\n\nL = 0.2    # Length\nNx = 40    # Number of elements: x direction\nheatrod  = HeatRod(L, Nx)\n\n### Boundaries ###\nh = 5.0 # Heat transfer coefficient\nϵ = 0.2 # Heat radiation coefficient\nθamb = 300; # Ambient temperature\nemission = Emission(h, ϵ, θamb)   # Convection and radiation\nboundary = Boundary(heatrod)\nsetEmission!(boundary, emission, :east)\n\n### Actuation ###\nrod_actuation = IOSetup(heatrod)\nscale         = 1.0;  # b=1\ninput_id      = 1     # Actuator index\npos_actuators = :west # Position of actuators\nsetIOSetup!(rod_actuation, heatrod, input_id, scale,  pos_actuators)\n\n\n### Simulation ###\nfunction heat_conduction!(dθ, θ, param, t)\n    u_in = 2e5 * ones(1)    # heat input\n    diffusion!(dθ, θ, heatrod, property, boundary, rod_actuation, u_in)\nend\n\nθinit = 300*ones(Nx)\ntspan = (0.0, 600.0)\n\n### Forward Euler method\nΔx = heatrod.sampling[1]  # Spatial discretization\nα = λ/(ρ *c)              # Diffusivity constant\ndt_max = Δx^2/(2*α)       # Highest possible sampling time\nΔt = 0.5\nif Δt > dt_max\n    error(\"Numerical stability is not guaranteed! Choose a smaller sampling time.\")\nend\n\nusing OrdinaryDiffEq\nalg = Euler();\nprob= ODEProblem(heat_conduction!,θinit,tspan)\nsol = solve(prob,alg, dt=Δt, saveat=1.0)\n\n\n### Adaptive numerical integration\nalg_2 = KenCarp5()\nsol_2 = solve(prob,alg_2, saveat=1.0)\n\n\n### Proportional control ###\nKp = 600    # Proportional gain\nΘref = 400  # Reference temperature of right boundary\ncontroller(ref, yout) = Kp*max((ref-yout),0) # Proportional controller\n\nfunction heat_conduction_controlled!(dθ, θ, param, t)\n    u_in = controller(Θref, θ[end]) * ones(1)    # heat input\n    diffusion!(dθ, θ, heatrod, property, boundary_rod, rod_actuation, u_in)\nend\n\ntspan_cntr = (0.0, 3500.0)\nprob_cntr = OrdinaryDiffEq.ODEProblem(heat_conduction_controlled!,θinit,tspan_cntr)\nsol_cntr = OrdinaryDiffEq.solve(prob_cntr,alg, dt=Δt, saveat=1.0)\n\n\n### Create plots\nusing Plots\nheatmap(sol[:,:], title=\"1D Heat conduction with Euler method\")\nheatmap(sol_2[:,:], title=\"1D Heat conduction with KenCarp5\")\n\n\n## Plots of proportional control\nplot(sol_cntr,legend=false, title=\"Proportional control of 1D heat conduction\")\n\nu_signals = controller.(Θref, sol_cntr[end,1:end-1])\ntgrid = 0 : 1.0 : tspan_cntr[2]-1\nplot(tgrid, u_signals, title=\"Control signals of proportional control\")","category":"page"},{"location":"theory/boundary_conditions/#Boundary-conditions","page":"Boundary conditions","title":"Boundary conditions","text":"","category":"section"},{"location":"theory/boundary_conditions/","page":"Boundary conditions","title":"Boundary conditions","text":"The temperature theta inside the geometrical object is driven by ","category":"page"},{"location":"theory/boundary_conditions/","page":"Boundary conditions","title":"Boundary conditions","text":"the material properties and the initial temperature and\nthe heat flux along the geometrical boundary sides.","category":"page"},{"location":"theory/boundary_conditions/","page":"Boundary conditions","title":"Boundary conditions","text":"We denote the heat flux","category":"page"},{"location":"theory/boundary_conditions/","page":"Boundary conditions","title":"Boundary conditions","text":"inwards the object as induced heat flux Phi_in and\noutwards the object as emitted heat flux Phi_out or Emission.","category":"page"},{"location":"theory/boundary_conditions/","page":"Boundary conditions","title":"Boundary conditions","text":"Mathematically spoken, the situation on the boundary sides are described here by Neumann or Robin boundary conditions. On boundary sides where actuators (e.g. heating elements) are assumed, we have","category":"page"},{"location":"theory/boundary_conditions/","page":"Boundary conditions","title":"Boundary conditions","text":"leftlambda(theta) nabla theta(tx) right  vecn = Phi_in(tx) + Phi_out(tx)","category":"page"},{"location":"theory/boundary_conditions/","page":"Boundary conditions","title":"Boundary conditions","text":"with outer normal vector vecn.","category":"page"},{"location":"theory/boundary_conditions/#Emitted-heat-flux-/-Emissions","page":"Boundary conditions","title":"Emitted heat flux / Emissions","text":"","category":"section"},{"location":"theory/boundary_conditions/","page":"Boundary conditions","title":"Boundary conditions","text":"The emissions are described by ","category":"page"},{"location":"theory/boundary_conditions/","page":"Boundary conditions","title":"Boundary conditions","text":"linear heat transfer / convection  ","category":"page"},{"location":"theory/boundary_conditions/","page":"Boundary conditions","title":"Boundary conditions","text":"-h (theta - theta_amb)","category":"page"},{"location":"theory/boundary_conditions/","page":"Boundary conditions","title":"Boundary conditions","text":"and nonlinear heat radiation","category":"page"},{"location":"theory/boundary_conditions/","page":"Boundary conditions","title":"Boundary conditions","text":"- epsilon  sigma (theta - theta_amb)","category":"page"},{"location":"theory/boundary_conditions/","page":"Boundary conditions","title":"Boundary conditions","text":"with ambient temperature (temperature of the object's surounding) theta_amb, heat transfer coefficient h0, emissivity epsilon in 01 and Stefan-Boltzmann constant sigma.","category":"page"},{"location":"theory/boundary_conditions/","page":"Boundary conditions","title":"Boundary conditions","text":"Heat transfer coefficient h and emissivity epsilon can be defined for each boundary side seperately. Internally, the multiplication of emissivity epsilon and Stefan-Boltzmann constant sigma is saved as radiation coefficient k = epsilon  sigma.","category":"page"},{"location":"theory/boundary_conditions/","page":"Boundary conditions","title":"Boundary conditions","text":"Emission","category":"page"},{"location":"theory/boundary_conditions/#Hestia.Emission","page":"Boundary conditions","title":"Hestia.Emission","text":"Emission  <: AbstractEmission\n\nType Emission contains the coefficients for heat transfer (convection) h, heat radiation k, and the ambient temperature θamb to model linear or nonlinear Stefan-Boltzmann boundary conditions\n\nPhi = -h  (theta - theta_amb) -k  (theta^4 - theta_amb^4)\n\nConstructor Emission(h,ϵ,θamb) expects emissivity ϵ which must be in interval [0,1]. The heat radiation coefficient is calculated internally as k=ϵ⋅σ using the Stefan-Boltzmann constant: σ = 5.6703744191844294e-8.\n\nElements\n\nh : heat transfer coefficient\n\nk : heat radiation coefficient\n\nθamb : ambient temperature\n\n\n\n\n\n","category":"type"},{"location":"theory/boundary_conditions/","page":"Boundary conditions","title":"Boundary conditions","text":"emit","category":"page"},{"location":"theory/boundary_conditions/#Hestia.emit","page":"Boundary conditions","title":"Hestia.emit","text":"emit(temperature :: Real, emission :: Emission)\n\nCalculates the right-hand side of the boundary conditions for a given Emission.\n\nPhi = -h  (theta - theta_amb) -k  (theta^4 - theta_amb^4)\n\n\n\n\n\n","category":"function"},{"location":"theory/boundary_conditions/","page":"Boundary conditions","title":"Boundary conditions","text":"emit!","category":"page"},{"location":"theory/boundary_conditions/#Hestia.emit!","page":"Boundary conditions","title":"Hestia.emit!","text":"emit!(flux :: Vector{<:Real}, temperature :: Vector{<:Real}, emission :: Emission)\n\nCalculates the right-hand side of the natural Robin boundary along a boundary for a given Emission.\n\nNote: in-place operation - results are saved in array flux.\n\n\n\n\n\n","category":"function"},{"location":"theory/boundary_conditions/#Induced-heat-flux","page":"Boundary conditions","title":"Induced heat flux","text":"","category":"section"},{"location":"theory/boundary_conditions/","page":"Boundary conditions","title":"Boundary conditions","text":"The induced heat flux is generated by N_u actuators that can be placed directly (e.g. heating elements) or indirectly (e.g. laser beam) on each boundary of the geometrical object. All actuators are assumed to have a specific spatial characterization b_n(x) reaching from 0 to 1 like a scaling from zero to 100%. The control signal u_n(t) defines the power intensity of the n-th actuator. So, the induced heat flux is defined by","category":"page"},{"location":"theory/boundary_conditions/","page":"Boundary conditions","title":"Boundary conditions","text":"Phi_in(tx) = sum_n=1^N_u b_n(x)  u_n(t)","category":"page"},{"location":"","page":"Hestia.jl","title":"Hestia.jl","text":"CurrentModule = Hestia","category":"page"},{"location":"#Hestia","page":"Hestia.jl","title":"Hestia","text":"","category":"section"},{"location":"","page":"Hestia.jl","title":"Hestia.jl","text":"Documentation for Hestia. If you are interested in Hestia, please take a look on page Getting Started.","category":"page"},{"location":"#Installation-and-Usage","page":"Hestia.jl","title":"Installation and Usage","text":"","category":"section"},{"location":"","page":"Hestia.jl","title":"Hestia.jl","text":"Start your Julia environment and change to the package manager","category":"page"},{"location":"","page":"Hestia.jl","title":"Hestia.jl","text":"julia> ]","category":"page"},{"location":"","page":"Hestia.jl","title":"Hestia.jl","text":"Add Hestia to your Julia libraries","category":"page"},{"location":"","page":"Hestia.jl","title":"Hestia.jl","text":"(@v1.9) pkg> add Hestia","category":"page"},{"location":"","page":"Hestia.jl","title":"Hestia.jl","text":"After the installation, return to your Julia environment","category":"page"},{"location":"","page":"Hestia.jl","title":"Hestia.jl","text":"julia> using Hestia","category":"page"}]
}
