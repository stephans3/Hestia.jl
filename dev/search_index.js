var documenterSearchIndex = {"docs":
[{"location":"components/","page":"Components","title":"Components","text":"Pages = [\"components.md\"]","category":"page"},{"location":"components/#Properties","page":"Components","title":"Properties","text":"","category":"section"},{"location":"components/","page":"Components","title":"Components","text":"Modules = [Hestia]\nPages   = [\"properties.jl\"]\nOrder   = [:type, :function, ]\nPrivate = false","category":"page"},{"location":"components/#Hestia.DynamicIsoProperty","page":"Components","title":"Hestia.DynamicIsoProperty","text":"DynamicIsoProperty\n\nTemperature-dependent isotropic properties\n\nA record for static isotropic properties.\n\n### Elements  \n`λᵢ` : thermal conductivity coefficients \n\n`ρᵢ` : volumetric mass density coefficients\n\n`cᵢ` : specific heat capacity coefficients\n\n\n\n\n\n","category":"type"},{"location":"components/#Hestia.StaticIsoProperty","page":"Components","title":"Hestia.StaticIsoProperty","text":"StaticIsoProperty\n\nTemperature-independent isotropic properties\n\nA record for static isotropic properties.\n\nElements\n\nλ : thermal conductivity \n\nρ : volumetric mass density \n\nc : specific heat capacity\n\n\n\n\n\n","category":"type"},{"location":"components/#Hestia.createDynamicIsoProperty-Union{Tuple{T}, Tuple{Vector{T}, Vector{T}, Vector{T}}} where T<:Real","page":"Components","title":"Hestia.createDynamicIsoProperty","text":"createDynamicIsoProperty(conductivity :: Array{T,1}, density :: Array{T,1}, capacity :: Array{T,1})  where T <: Real\n\nReturns a DynamicIsoProperty    \n\n\n\n\n\n","category":"method"},{"location":"components/#Hestia.createStaticIsoProperty-Tuple{Real, Real, Real}","page":"Components","title":"Hestia.createStaticIsoProperty","text":"createStaticIsoProperty(conductivity :: Real, density :: Real, capacity :: Real)\n\nReturns a StaticIsoProperty\n\n\n\n\n\n","category":"method"},{"location":"components/#Hestia.getdiffusivity-Tuple{StaticIsoProperty}","page":"Components","title":"Hestia.getdiffusivity","text":"getdiffusivity(prop :: StaticIsoProperty)\n\nReturns the diffusivity of a StaticIsoProperty\n\nα = λ/(ρ ⋅ c)\n\n\n\n\n\n","category":"method"},{"location":"components/#Geometry","page":"Components","title":"Geometry","text":"","category":"section"},{"location":"components/","page":"Components","title":"Components","text":"Modules = [Hestia]\nPages   = [\"geometry.jl\"]\nOrder   = [:type, :function, ]\nPrivate = false","category":"page"},{"location":"components/#Hestia.HeatCuboid","page":"Components","title":"Hestia.HeatCuboid","text":"HeatCuboid <: AbstractCubicObject\n\nModel of a two dimensional plate for heat conduction\n\nElements\n\ndimension : tuple of length, width and heigth of the plate: (length, width, height)\n\nsampling : tuple of spatial discretization: (Δx, Δy, Δz)\n\nheatcells : number of heatcells in total\n\nsegmentation : underlying segmentation, e.g. SimpleSegment or MixedSegment\n\n\n\n\n\n","category":"type"},{"location":"components/#Hestia.HeatPlate","page":"Components","title":"Hestia.HeatPlate","text":"HeatPlate <: AbstractCubicObject\n\nModel of a two dimensional plate for heat conduction\n\nElements\n\ndimension : tuple of length and width of the plate: (length, width)\n\nsampling : tuple of spatial discretization: (Δx, Δy)\n\nheatcells : Number of heatcells per direction: {Nx, Ny}\n\nsegmentation : underlying segmentation, e.g. SimpleSegment or MixedSegment\n\n\n\n\n\n","category":"type"},{"location":"components/#Hestia.HeatPlate-Tuple{Real, Real, Integer, Integer, AbstractSegmentation}","page":"Components","title":"Hestia.HeatPlate","text":"HeatPlate(plate_length :: Real, plate_width ::  Real, Nx :: Integer, Ny :: Integer, heatcells :: Array{S,1} where S <: Real, segmentation :: T where T <: AbstractSegmentation)\n\nReturns a HeatPlate model\n\n\n\n\n\n","category":"method"},{"location":"components/#Hestia.HeatRod-Tuple{Real, Integer, AbstractSegmentation}","page":"Components","title":"Hestia.HeatRod","text":"HeatRod(rod_length :: Real,  heatcells :: Integer, segmentation :: T where T <: AbstractSegmentation )\n\nReturns a HeatRod model\n\n\n\n\n\n","category":"method"},{"location":"components/#Hestia.getindices-Tuple{HeatPlate}","page":"Components","title":"Hestia.getindices","text":"getindices( heatPlate :: HeatPlate ; cellPosition::Symbol = :complete )\n\nReturns all indices for a certain cellPosition\n\nValid CellPositions\n\n:complete\n\n:center\n\n:west\n\n:east\n\n:south\n\n:north\n\n\n\n\n\n","category":"method"},{"location":"components/#Hestia.getindices-Tuple{HeatRod}","page":"Components","title":"Hestia.getindices","text":"getindices( heatrod :: HeatRod ; cellPosition::Symbol = :complete )\n\nReturns all indices for a certain cellPosition\n\nValid CellPositions\n\n:complete\n\n:center\n\n:west\n\n:east\n\n\n\n\n\n","category":"method"},{"location":"components/#Segmentation","page":"Components","title":"Segmentation","text":"","category":"section"},{"location":"components/","page":"Components","title":"Components","text":"Modules = [Hestia]\nPages   = [\"segmentation.jl\"]\nOrder   = [:type, :function, ]\nPrivate = false","category":"page"},{"location":"components/#Hestia.HyperSegment","page":"Components","title":"Hestia.HyperSegment","text":"HyperSegment <: AbstractSegmentation\n\nA meta container segment to store all segments\n\n\n\n\n\n","category":"type"},{"location":"components/#Hestia.MixedSegment","page":"Components","title":"Hestia.MixedSegment","text":"MixedSegment <: AbstractSegmentation\n\nA container that identifies each element of a list of cells with its own specific thermal property.\n\n\n\n\n\n","category":"type"},{"location":"components/#Hestia.SimpleSegment","page":"Components","title":"Hestia.SimpleSegment","text":"SimpleSegment\n\nA container that identifies a list of cells with its thermal property.\n\n\n\n\n\n","category":"type"},{"location":"components/#Hestia.createSimpleSegment-Tuple{Hestia.AbstractIsotropicProperty, Vector{S2} where S2<:Integer}","page":"Components","title":"Hestia.createSimpleSegment","text":"createSimpleSegment( property :: AbstractIsotropicProperty, cellindices :: Array{S2, 1} where S2 <: Integer)\n\nReturns a SimpleSegment\n\n\n\n\n\n","category":"method"},{"location":"components/#Boundary","page":"Components","title":"Boundary","text":"","category":"section"},{"location":"components/","page":"Components","title":"Components","text":"Modules = [Hestia]\nPages   = [\"boundary.jl\"]\nOrder   = [:type, :function, ]\nPrivate = false","category":"page"},{"location":"components/#Emission","page":"Components","title":"Emission","text":"","category":"section"},{"location":"components/","page":"Components","title":"Components","text":"Modules = [Hestia]\nPages   = [\"emission.jl\"]\nOrder   = [:type, :function, ]\nPrivate = false","category":"page"},{"location":"components/#Hestia.Emission","page":"Components","title":"Hestia.Emission","text":"Emission  <: AbstractEmission\n\nReturns the right-hand side of a natural Robin boundary condition including heat conduction and emission to the environment.\n\nElements\n\nconduction : heat conduction coefficient\n\nradiation : heat radiation coefficient\n\nθamb : ambient temperature\n\n\n\n\n\n","category":"type"},{"location":"components/#Hestia.createEmission-Tuple{Real, Real, Real}","page":"Components","title":"Hestia.createEmission","text":"createEmission(conduction :: Real, emissivity :: Real, θamb :: Real)\n\nReturns an Emission for a given conductivity, emissivity and ambient temperature θamb\n\nInformation\n\nThis constant is used:\n\nStefan-Boltzmann constant: σ = 5.6703744191844294e-8\n\n\n\n\n\n","category":"method"},{"location":"components/#Hestia.emit!-Tuple{Vector{S1} where S1<:Real, Vector{S2} where S2<:Real, Emission}","page":"Components","title":"Hestia.emit!","text":"emit!(flux :: Array{S1,1} where S1 <: Real, temperature :: Array{S2,1} where S2 <: Real, emission :: Emission)\n\nCalculates the right-hand side of the natural Robin boundary along a boundary for a given Emission.\n\nNote: in-place operation - results are saved in array flux.\n\n\n\n\n\n","category":"method"},{"location":"components/#Hestia.emit-Tuple{Real, Emission}","page":"Components","title":"Hestia.emit","text":"emit!(flux :: Array{S1,1} where S1 <: Real, temperature :: Array{S2,1} where S2 <: Real, emission :: Emission)\n\nCalculates the right-hand side of the natural Robin boundary along a boundary for a given Emission.\n\nNote: in-place operation - results are saved in array flux.\n\n\n\n\n\n","category":"method"},{"location":"components/#Configuration","page":"Components","title":"Configuration","text":"","category":"section"},{"location":"components/","page":"Components","title":"Components","text":"Modules = [Hestia]\nPages   = [\"characterization.jl\"]\nOrder   = [:type, :function, ]\nPrivate = false","category":"page"},{"location":"components/#Hestia.RadialConfiguration","page":"Components","title":"Hestia.RadialConfiguration","text":"RadialConfiguration <: AbstractStaticConfiguration\n\nStores the values for the calculation of m  exp( -M (x - xₛ)^2ν )\n\nscaling : m ∈ [0, 1]\n\npower : ν ∈ [0, ∞)\n\ncenter : xₛ ∈ R^{3}\n\ncurvature : M ∈ R^{3 x 3} for the planar boundaries\n\n\n\n\n\n","category":"type"},{"location":"components/#Hestia.characterize-Tuple{Real, Real, Real, RadialConfiguration}","page":"Components","title":"Hestia.characterize","text":"characterize(start :: Real, stop :: Real, step :: Real, config :: RadialConfiguration; dim = 1 :: Integer )\n\nx₁: dim = 1\n\nx₂: dim = 2\n\nx₃: dim = 3\n\n\n\n\n\n","category":"method"},{"location":"components/#Hestia.characterize-Union{Tuple{T}, Tuple{Tuple{T, T}, Tuple{T, T}, Tuple{T, T}, RadialConfiguration}} where T<:Real","page":"Components","title":"Hestia.characterize","text":"characterize(start :: Real, stop :: Real, step :: Real, config :: RadialConfiguration; dim = 1 :: Integer )\n\nx₁ ∪ x₂ dim = {1,2}\n\nx₁ ∪ x₃: dim = {1,3}\n\nx₂ ∪ x₃: dim = {2,3}\n\n\n\n\n\n","category":"method"},{"location":"components/#Hestia.initConfiguration-Tuple{}","page":"Components","title":"Hestia.initConfiguration","text":"initConfiguration()\n\nInitializes and returns a basic RadialConfiguration\n\n\n\n\n\n","category":"method"},{"location":"components/#Hestia.setConfiguration-Tuple{Real, Integer, Matrix{T} where T<:Real}","page":"Components","title":"Hestia.setConfiguration","text":"setConfiguration( scale :: Real , power :: Integer; curvature = 1.0 :: Real)\n\nThe center is set to the origin (0,0,0).\n\n\n\n\n\n","category":"method"},{"location":"components/#Hestia.setConfiguration-Tuple{Real, Integer, Real}","page":"Components","title":"Hestia.setConfiguration","text":"setConfiguration( scale :: Real , power :: Integer, curvature :: Real)\n\nThe center is set to the origin (0,0,0).\n\n\n\n\n\n","category":"method"},{"location":"components/#Hestia.setConfiguration-Tuple{Real, Integer, Tuple{Real, Real, Real}, Matrix{T} where T<:Real}","page":"Components","title":"Hestia.setConfiguration","text":"setConfiguration( scale :: Real , power :: Integer, central_point :: Tuple{Real,Real,Real}, curvature :: Array{T,2} where T <: Real)\n\nReturns a RadialConfiguration\n\n\n\n\n\n","category":"method"},{"location":"components/#Hestia.setConfiguration-Tuple{Real, Integer, Tuple{Real, Real, Real}, Real}","page":"Components","title":"Hestia.setConfiguration","text":"setConfiguration( scale :: Real , power :: Integer, central_point :: Tuple{Real,Real,Real}, curvature :: Real)\n\nHere the variable curvature is multiplied with the identity matrix to gain matrix M.\n\nReturns a RadialConfiguration\n\n\n\n\n\n","category":"method"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = Hestia","category":"page"},{"location":"#Hestia","page":"Home","title":"Hestia","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for Hestia.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"#Components","page":"Home","title":"Components","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Pages = [\"components.md\",]\nDepth = 1","category":"page"}]
}
